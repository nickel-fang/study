package com.jetsen.algorithm.other;

import java.util.Arrays;

public class A924_MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        //1. color each component
        //colors[node] = the color of this node
        int N = graph.length;
        int[] colors = new int[N];
        Arrays.fill(colors, -1);
        int Color = 0; //0号颜色

        for (int node = 0; node < N; node++) {
            if (colors[node] == -1)
                dfs(graph, colors, node, Color++);
        }

        //2. size of each color
        int[] size = new int[Color];
        for (int color : colors)
            size[color]++;

        //3. find unique colors
        int[] colorCount = new int[Color];
        for (int node : initial)
            colorCount[colors[node]]++;

        //4. answer
        int result = Integer.MAX_VALUE;
        for (int node : initial) {
            int color = colors[node];
            if (colorCount[color] == 1) {
                if (result == Integer.MAX_VALUE)
                    result = node;
                else if (size[color] > size[colors[result]])
                    result = node;
            }
        }
        return (result == Integer.MAX_VALUE)?initial[0]:result;
    }

    private void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int i = 0; i < graph.length; i++) {
            if (graph[node][i] == 1 && colors[i] == -1)
                dfs(graph, colors, i, color);
        }
    }
}
